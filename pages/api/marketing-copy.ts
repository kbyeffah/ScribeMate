import type { NextApiRequest, NextApiResponse } from "next";

interface TogetherAIResponse {
  choices?: { message: { content: string } }[];
  error?: { message: string };
}

async function fetchWithRetry(
  url: string,
  options: RequestInit,
  retries = 3,
  timeoutMs = 30000
): Promise<TogetherAIResponse> {
  for (let i = 0; i < retries; i++) {
    const controller = new AbortController();
    const timeout = setTimeout(() => controller.abort(), timeoutMs);

    try {
      console.log(`Attempt ${i + 1}/${retries}: Sending request to Together AI`);
      const response = await fetch(url, { ...options, signal: controller.signal });
      clearTimeout(timeout);

      console.log(`Attempt ${i + 1}: Received response, status: ${response.status}`);
      const data: TogetherAIResponse = await response.json();
      console.log(`Attempt ${i + 1}: Response data:`, JSON.stringify(data, null, 2));

      if (!response.ok) {
        throw new Error(data.error?.message || `API request failed with status ${response.status}`);
      }
      return data; // Explicitly return data on success
    } catch (error) {
      clearTimeout(timeout);
      console.error(`Attempt ${i + 1} failed:`, error);
      if (i === retries - 1) throw error; // Last attempt, propagate the error
      await new Promise((resolve) => setTimeout(resolve, 2000 * (i + 1))); // Exponential backoff
    }
  }
  throw new Error("fetchWithRetry failed to return data after all retries"); // Fallback (shouldnâ€™t reach here)
}

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  console.log("Running Together AI handler");
  if (req.method !== "POST") {
    return res.status(405).json({ error: "Method Not Allowed. Use POST instead." });
  }

  const { input } = req.body;
  if (!input || typeof input !== "string") {
    return res.status(400).json({ error: "Valid input text is required" });
  }

  try {
    const data = await fetchWithRetry(
      "https://api.together.xyz/v1/chat/completions",
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${process.env.TOGETHER_API_KEY}`,
        },
        body: JSON.stringify({
          model: "mistralai/Mixtral-8x7B-Instruct-v0.1",
          messages: [
            {
              role: "user",
              content: `You are a marketing expert, and a customer approaches you to write a very short and exciting marketing copy for them. This is the topic they would like a marketing copy for: '${input}'\n\nThis is the short marketing copy you came up with:`,
            },
          ],
          max_tokens: 100,
        }),
      },
      3, // 3 retries
      30000 // 30-second timeout
    );

    // Add extra validation for data
    if (!data || !data.choices || !Array.isArray(data.choices) || data.choices.length === 0) {
      console.error("Invalid response data:", data);
      throw new Error("API response missing valid choices");
    }

    const result = data.choices[0].message.content; // Remove optional chaining for stricter check
    if (!result) {
      console.error("No content in message:", data.choices[0]);
      throw new Error("No response content generated by the model");
    }

    console.log("Generated copy:", result);
    return res.status(200).json({ copy: result });
  } catch (error: unknown) {
    console.error("API Error:", error);
    return res.status(500).json({
      error: error instanceof Error ? error.message : "Internal Server Error",
    });
  }
}